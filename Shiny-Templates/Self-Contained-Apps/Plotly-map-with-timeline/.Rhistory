geom_text(aes(label = weight*100),
vjust = "top")
update.packages()
library(plotly)
library(plotly)
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
ggplotly(ggiris)
install.packages("data.tree")
library(data.tree)
library(shiny)
shiny::runApp('Downloads/radiant-master/inst/base')
update.packages()
update.packages()
update.packages()
plot_ly(economics, x = date, y = uempmed, name = "unemployment")
add_trace(y = fitted(loess(uempmed ~ as.numeric(date))))
library(plotly)
plot_ly(economics, x = date, y = uempmed, name = "unemployment")
add_trace(y = fitted(loess(uempmed ~ as.numeric(date))))
plot_ly(economics, x = date, y = uempmed, name = "unemployment") %>%
add_trace(y = fitted(loess(uempmed ~ as.numeric(date))))
plot_ly(economics, x = date, y = uempmed, name = "unemployment") %>%
add_trace(y = fitted(loess(uempmed ~ as.numeric(date))), x = date)
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
p <- plot_ly(economics, x = date, y = unemploy / pop, name = "raw")
add_trace(p, y = fitted(m), name = "loess")
add_trace(p, y = fitted(m), x = date, name = "loess")
layout(p3, font = list(family = "Courier New, monospace"))
p <- plot_ly(economics, x = date, y = uempmed, type = "scatter",
showlegend = FALSE)
# add a loess smoother
p2 <- add_trace(p, y = fitted(loess(uempmed ~ as.numeric(date))), x = date)
# add a title
p3 <- layout(p2, title = "Median duration of unemployment (in weeks)")
# change the font
layout(p3, font = list(family = "Courier New, monospace"))
p <- plot_ly(economics, x = date, y = uempmed, type = "scatter",
showlegend = FALSE)
# add a loess smoother
p2 <- add_trace(p, y = fitted(loess(uempmed ~ as.numeric(date))))
# add a title
p3 <- layout(p2, title = "Median duration of unemployment (in weeks)")
# change the font
layout(p3, font = list(family = "Courier New, monospace"))
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>%
add_trace(y = .fitted)
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>%
add_trace(y = .fitted, x = date)
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment()
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment()
%>%
add_trace(y = .fitted, x = .as.numeric.date.)
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>%
add_trace(y = .fitted, x = .as.numeric.date.)
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>%
add_trace(y = .fitted, x = as.numeric.date.)
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>%
add_trace(y = .fitted, x = date)
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>%
add_trace(y = .fitted, x = economics$date)
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment()
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>% as.Date(as.numeric.date.)
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>% c(".",as.Date(as.numeric.date.))
economics %>%
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>% c(".",as.Date(as.numeric.date.))
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment()
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>% str()
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>%
add_trace(y = .fitted, x = as.numeric.date.)
economics %$%
transform(rate = unemploy / pop) %$%
plot_ly(x = date, y = rate) %$%
loess(rate ~ as.numeric(date), data = .) %$%
broom::augment() %$%
add_trace(y = .fitted, x = as.numeric.date.)
library(magrittr)
economics %$%
transform(rate = unemploy / pop) %$%
plot_ly(x = date, y = rate) %$%
loess(rate ~ as.numeric(date), data = .) %$%
broom::augment() %$%
add_trace(y = .fitted, x = as.numeric.date.)
economics %$%
transform(rate = unemploy / pop)
economics %$%
transform(rate = .unemploy / .pop)
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>% str()
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %<>% output_of_broom
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %<>% output_of_broom %>% output_of_broom
output_of_broom <- economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment()
output_of_broom$as.numeric.date.
economics$date
economics$date[31]
as.numeric("1970-01-01")
economics$date[31]
economics$date[31] %>% class()
as.numeric(economics$date[31])
as.Date.numeric(economics$date[31])
as.Date.numeric(economics$date[31], origin = economics$date[31])
as.Date.numeric(economics$date[31], origin = "1970-01-01")
as.Date.numeric(0, origin = "1970-01-01")
as.Date.numeric(1, origin = "1970-01-01")
as.Date.numeric(output_of_broom$as.numeric.date., origin = "1970-01-01")
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>%
add_trace(y = .fitted, x = economics$date)
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>%
add_trace(y = .fitted, x = as.Date.numeric(output_of_broom$as.numeric.date., origin = "1970-01-01"))
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>%
add_trace(y = .fitted, x = as.Date.numeric(as.numeric.date., origin = "1970-01-01"))
mtcars <- mtcars[order(mtcars$disp), ]
p <- plot_ly(mtcars, x = disp, y = mpg, mode = "markers",
text = rownames(mtcars), showlegend = FALSE)
add_trace(p, y = fitted(loess(mpg ~ disp)), mode = "lines",
name = "loess smoother", showlegend = TRUE)
detach("package:magrittr", unload=TRUE)
library(plotly)
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
p <- plot_ly(economics, x = date, y = unemploy / pop, name = "raw")
# works
add_trace(p, y = fitted(m), name = "loess")
library(visNetwork)
# highlight nearest
nodes <- data.frame(id = 1:15, label = paste("Label", 1:15),
group = sample(LETTERS[1:3], 15, replace = TRUE))
edges <- data.frame(from = trunc(runif(15)*(15-1))+1,
to = trunc(runif(15)*(15-1))+1)
visNetwork(nodes, edges) %>% visOptions(highlightNearest = TRUE)
# highlight nearest
nodes <- data.frame(id = 1:15, label = paste("Label", 1:15),
group = sample(LETTERS[1:3], 15, replace = TRUE))
edges <- data.frame(from = trunc(runif(15)*(15-1))+1,
to = trunc(runif(15)*(15-1))+1)
visNetwork(nodes, edges) %>% visOptions(highlightNearest = TRUE)
# highlight nearest
nodes <- data.frame(id = 1:15, value = 1:15)
edges <- data.frame(from = trunc(runif(15)*(15-1))+1,
to = trunc(runif(15)*(15-1))+1)
visNetwork(nodes, edges) %>% visOptions(highlightNearest = TRUE)
nodes <- data.frame(id = 1:15, value = 1:15)
edges <- data.frame(from = trunc(runif(15)*(15-1))+1,
to = trunc(runif(15)*(15-1))+1)
visNetwork(nodes, edges)
.rs.enableRStudioConnectUI(TRUE)
raws <- list.files("/Users/martinjohnhadley/Google Drive/Wedding/ZupnikPhotos/cr2")
edited <- list.files("/Users/martinjohnhadley/Google Drive/Wedding/ZupnikPhotos/jpgs")
setdiff(raws,edited)
not_edited <- setdiff(raws,edited)
foo <- raws[1:5]
foo
gsub(".{3}","kill",foo)
gsub("[.]{3}","kill",foo)
gsub("\.{3}","kill",foo)
gsub("\\.{3}","kill",foo)
file_path_sans_ext(foo)
library(tools)
file_path_sans_ext(foo)
raws <- list.files("/Users/martinjohnhadley/Google Drive/Wedding/ZupnikPhotos/cr2")
raws <- file_path_sans_ext(raws)
edited <- list.files("/Users/martinjohnhadley/Google Drive/Wedding/ZupnikPhotos/jpgs")
edited <- file_path_sans_ext(edited)
not_edited <- setdiff(raws,edited)
library(devtools)
install_github('rstudio/htmltools')
install_github('ramnathv/htmlwidgets')
install_github('htmlwidgets/knob')
library(knob)
knob(value = 20, min = 0, max = 100,
angleArc = 250, angleOffset = -125,
fgColor = "#66CC66")
library(shiny)
library(knob)
ui = shinyUI(fluidPage(
sliderInput('value', 'Value', 0, 200, 50),
sliderInput('angleArc', 'Arc Angle', 0, 360, 250),
knobOutput('gauge')
))
server = function(input, output){
output$gauge <- renderKnob(knob(
value = input$value,
min = 0,
max = 200,
angleArc = input$angleArc,
fgColor="#66CC66"
))
}
shinyApp(ui = ui, server = server)
library(shiny)
library(knob)
ui = shinyUI(fluidPage(
sliderInput('value', 'Value', 0, 200, 50),
sliderInput('angleArc', 'Arc Angle', -90, 360, 250),
knobOutput('gauge')
))
server = function(input, output){
output$gauge <- renderKnob(knob(
value = input$value,
min = 0,
max = 200,
angleArc = input$angleArc,
fgColor="#66CC66"
))
}
shinyApp(ui = ui, server = server)
library(shiny)
library(knob)
ui = shinyUI(fluidPage(
sliderInput('value', 'Value', 0, 200, 50),
sliderInput('angleArc', 'Arc Angle', 45, 360, 250),
knobOutput('gauge')
))
server = function(input, output){
output$gauge <- renderKnob(knob(
value = input$value,
min = 0,
max = 200,
angleArc = input$angleArc,
fgColor="#66CC66"
))
}
shinyApp(ui = ui, server = server)
knob(value = 20, min = 0, max = 100,
angleArc = 250, angleOffset = -125,
fgColor = "#66CC66")
library(shiny)
library(knob)
ui = shinyUI(fluidPage(
sliderInput('value', 'Value', 0, 200, 50),
sliderInput('angleArc', 'Arc Angle', 45, 360, 250),
knobOutput('gauge')
))
server = function(input, output){
output$gauge <- renderKnob(knob(
value = input$value,
min = 0,
max = 200,
angleArc = input$angleArc,
angleOffset = -125,
fgColor="#66CC66"
))
}
shinyApp(ui = ui, server = server)
library(shiny)
library(knob)
ui = shinyUI(fluidPage(
sliderInput('value', 'Value', 0, 200, 50),
sliderInput('angleArc', 'Arc Angle', 45, 360, 250),
knobOutput('gauge')
))
server = function(input, output){
output$gauge <- renderKnob(knob(
value = input$value,
min = 0,
max = 200,
angleArc = input$angleArc,
angleOffset = -90,
fgColor="#66CC66"
))
}
shinyApp(ui = ui, server = server)
library(leaflet)
pal <- colorQuantile("YlOrRd", NULL, n = 8)
leaflet(orstationc) %>%
addTiles() %>%
addCircleMarkers(color = ~pal(tann))
library(maps)
leaflet(orstationc) %>%
addTiles() %>%
addCircleMarkers(color = ~pal(tann))
pal <- colorQuantile("YlOrRd", NULL, n = 8)
leaflet(orstationc) %>%
addTiles() %>%
addCircleMarkers(color = ~pal(tann))
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m
library(WDI)
dat <- WDI(indicator='SE.PRM.TCHR', country=c('MX','CA','US'), start=1960, end=2012)
library(ggplot2)
ggplot(data = dat, aes(x = SE.PRM.TCHR, fill = country)) + geom_histogram() +
ylab("Teachers in primary education, both sexes (number)")
dat
library(highcharter)
hchart() %>%
hc_chart(type = "line") %>%
hc_xAxis(categories = dat$country) %>%
hc_add_series(dat$year)
hchart() %>%
hc_chart(type = "line") %>%
hc_xAxis(categories = dat$country) %>%
hc_add_series(data = dat$year)
library(shiny)
runApp('Github/Live-Data_Scripts-and-Templates/Shiny-Templates/Progress-Wheel-Shiny')
runApp('Github/Live-Data_Scripts-and-Templates/Shiny-Templates/Progress-Wheel-Shiny')
pause_function <- function(pauseTime = NA){
Sys.sleep(pauseTime)
curve(x^2)
}
pause_function(2)
# This function computes a new data set. It can optionally take a function,
# updateProgress, which will be called as each row of data is added.
compute_data <- function(updateProgress = NULL) {
# Create 0-row data frame which will be used to store data
dat <- data.frame(x = numeric(0), y = numeric(0))
for (i in 1:10) {
Sys.sleep(0.25)
# Compute new row of data
new_row <- data.frame(x = rnorm(1), y = rnorm(1))
# If we were passed a progress update function, call it
if (is.function(updateProgress)) {
text <- paste0("x:", round(new_row$x, 2), " y:", round(new_row$y, 2))
updateProgress(detail = text)
}
# Add the new row of data
dat <- rbind(dat, new_row)
}
dat
}
server <- function(input, output) {
output$table <- renderTable({
input$goTable
# Create a Progress object
progress <- shiny::Progress$new()
progress$set(message = "Computing data", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
# Create a callback function to update progress.
# Each time this is called:
# - If `value` is NULL, it will move the progress bar 1/5 of the remaining
#   distance. If non-NULL, it will set the progress to that value.
# - It also accepts optional detail text.
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
# Compute the new data, and pass in the updateProgress function so
# that it can update the progress indicator.
compute_data(updateProgress)
})
}
ui <- shinyUI(basicPage(
tableOutput('table'),
actionButton('goTable', 'Go table')
))
shinyApp(ui = ui, server = server)
no_of_thank_yous <- 66
no_of_generic_images <- 3
no_of_generic_images <- 4
no_of_mix_bag <- 4*20
no_of_thank_yous*no_of_generic_images + no_of_selected_images + no_of_mix_bag
no_of_thank_yous <- 66
no_of_generic_images <- 4
no_of_selected_images <- 173
no_of_mix_bag <- 4*20
no_of_thank_yous*no_of_generic_images + no_of_selected_images + no_of_mix_bag
shiny::runApp('Github/Live-Data_Scripts-and-Templates/Shiny-Templates/Self-Contained-Apps/Plotly-map-with-timeline')
runApp('Github/Live-Data_Scripts-and-Templates/Shiny-Templates/Self-Contained-Apps/Plotly-map-with-timeline')
example_map_data <- read.csv(file ="data/example-map-data.csv", stringsAsFactors = FALSE)
example_map_data$Date <- force_tz(ymd(example_map_data$Date, quiet = TRUE), tzone = "GMT")
setwd("~/Github/Live-Data_Scripts-and-Templates/Shiny-Templates/Self-Contained-Apps/Plotly-map-with-timeline")
example_map_data <- read.csv(file ="data/example-map-data.csv", stringsAsFactors = FALSE)
example_map_data$Date <- force_tz(ymd(example_map_data$Date, quiet = TRUE), tzone = "GMT")
all_countries <- unique(c(example_map_data$Sender.Country, example_map_data$Receiver.Country))
location_name_df <- data.frame("LatLong" = c(example_map_data$Sender.LatLong.String,example_map_data$Receiver.LatLong.String),
"Location.Name" = c(example_map_data$Sender.Location, example_map_data$Receiver.Location))
### ============= Find duplicate locations
location_name_df <- location_name_df[!duplicated(location_name_df),]
location_name_df$LatLong <- as.character(location_name_df$LatLong)
location_name_df$Location.Name <- as.character(location_name_df$Location.Name)
duplicate_locations <- subset(location_name_df, LatLong %in% location_name_df[duplicated(location_name_df$LatLong),]$LatLong)
# Remove duplicates
location_name_df <- location_name_df[!duplicated(location_name_df$LatLong),]
example_map_data$Category <- as.factor(example_map_data$Category)
example_map_data$Date
min(example_map_data$Date)
runApp()
runApp()
## Import file
example_map_data <- read.csv(file ="data/example-map-data.csv", stringsAsFactors = FALSE)
example_map_data$Date <- force_tz(ymd(example_map_data$Date, quiet = TRUE), tzone = "GMT")
## Coerce dates into dates:
all_countries <- unique(c(example_map_data$Sender.Country, example_map_data$Receiver.Country))
## Make a set of location -> name replacements
location_name_df <- data.frame("LatLong" = c(example_map_data$Sender.LatLong.String,example_map_data$Receiver.LatLong.String),
"Location.Name" = c(example_map_data$Sender.Location, example_map_data$Receiver.Location))
### ============= Find duplicate locations
location_name_df <- location_name_df[!duplicated(location_name_df),]
location_name_df$LatLong <- as.character(location_name_df$LatLong)
location_name_df$Location.Name <- as.character(location_name_df$Location.Name)
duplicate_locations <- subset(location_name_df, LatLong %in% location_name_df[duplicated(location_name_df$LatLong),]$LatLong)
# Remove duplicates
location_name_df <- location_name_df[!duplicated(location_name_df$LatLong),]
### ============= Letter Series
example_map_data$Category <- as.factor(example_map_data$Category)
str(example_map_data)
sapply(example_map_data$Sender.Location, "[[",1)
sapply(example_map_data$Sender.LatLong.String, "[[",1)
sapply(strsplit(example_map_data$Sender.LatLong.String, " "), "[[",1)
sapply(strsplit(example_map_data$Sender.LatLong.String, " "), "[[",2)
example_map_data$Send.Lat = sapply(strsplit(example_map_data$Sender.LatLong.String, " "), "[[",1)
example_map_data$Send.Lon = sapply(strsplit(example_map_data$Sender.LatLong.String, " "), "[[",2)
example_map_data$Receive.Lat = sapply(strsplit(example_map_data$Receiver.LatLong.String, " "), "[[",1)
example_map_data$Receive.Lon = sapply(strsplit(example_map_data$Receiver.LatLong.String, " "), "[[",2)
str(example_map_data)
write.csv("data/example-map-data2.csv", example_map_data)
write.csv(file = "data/example-map-data2.csv", x = example_map_data)
example_map_data <- read.csv(file ="data/example-map-data.csv", stringsAsFactors = FALSE)
example_map_data$Date <- force_tz(ymd(example_map_data$Date, quiet = TRUE), tzone = "GMT")
example_map_data$Date
all_countries <- unique(c(example_map_data$Sender.Country, example_map_data$Receiver.Country))
location_name_df <- data.frame("LatLong" = c(example_map_data$Sender.LatLong.String,example_map_data$Receiver.LatLong.String),
"Location.Name" = c(example_map_data$Sender.Location, example_map_data$Receiver.Location))
c(example_map_data$Sender.Location, example_map_data$Receiver.Location)
unique(c(example_map_data$Sender.Location, example_map_data$Receiver.Location))
unique_locations <- unique(c(example_map_data$Sender.Location, example_map_data$Receiver.Location))
subset(example_map_data, !duplicated(example_map_data$Sender.Location))
subset(example_map_data, !duplicated(example_map_data$Sender.Location)) %>% nrow()
unique_locations %>% length()
subset(example_map_data, !duplicated(example_map_data$Sender.Location) & !duplicated(example_map_data$Receiver.Location)) %>% nrow()
subset(example_map_data, !duplicated(example_map_data$Sender.Location) | !duplicated(example_map_data$Receiver.Location)) %>% nrow()
