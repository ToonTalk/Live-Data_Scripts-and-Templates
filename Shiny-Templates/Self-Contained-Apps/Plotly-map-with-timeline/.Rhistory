nrow(example.data)
small <- example.data[1:200,]
small$Category <- c(rep("A",20),rep("B",20),rep("C",60),rep("D",20),rep("E",20),rep("F",20),rep("G",20),rep("E",20))
length(unique(small$Sender.LatLong.String))
length(unique(small$Receiver.LatLong.String))
length(unique(small$Receiver.Country))
length(unique(small$Sender.Country))
write.csv(file = "data/example-map-data.csv", x = small)
example_map_data <- read.csv(file ="data/example-map-data.csv", stringsAsFactors = FALSE)
all_countries <- unique(c(example_map_data$Sender.Country, example_map_data$Receiver.Country))
## Make a set of location -> name replacements
location_name_df <- data.frame("LatLong" = c(example_map_data$Sender.LatLong.String,example_map_data$Receiver.LatLong.String),
"Location.Name" = c(example_map_data$Sender.Location, example_map_data$Receiver.Location))
### ============= Find duplicate locations
location_name_df <- location_name_df[!duplicated(location_name_df),]
location_name_df$LatLong <- as.character(location_name_df$LatLong)
location_name_df$Location.Name <- as.character(location_name_df$Location.Name)
duplicate_locations <- subset(location_name_df, LatLong %in% location_name_df[duplicated(location_name_df$LatLong),]$LatLong)
# Remove duplicates
location_name_df <- location_name_df[!duplicated(location_name_df$LatLong),]
dates <- unique(example_map_data$Date)
dates
dput(dates)
example.data$Date
example.data$Date == NA
example.data$Date == "NA"
example.data$Date
example.data$Date ==NA
example.data$Date == NA
dput(example.data$Date)
force_tz(dmy(example.data$Date, quiet = TRUE), tzone = "GMT")
example.data <- entries.with.locations[,c("Sender.Location","Sender.LatLong.String","Receiver.Location", "Receiver.LatLong.String", "Sender.Country",
"Receiver.Country","Date")]
## drop elements that don't have locations:
example.data <- example.data[example.data$Sender.LatLong.String != "NA NA",]
example.data <- example.data[example.data$Receiver.LatLong.String != "NA NA",]
## drop elements with shit date
force_tz(dmy(example.data$Date, quiet = TRUE), tzone = "GMT")
library(lubridate)
force_tz(dmy(example.data$Date, quiet = TRUE), tzone = "GMT")
example.data <- entries.with.locations[,c("Sender.Location","Sender.LatLong.String","Receiver.Location", "Receiver.LatLong.String", "Sender.Country",
"Receiver.Country","Date")]
## drop elements that don't have locations:
example.data <- example.data[example.data$Sender.LatLong.String != "NA NA",]
example.data <- example.data[example.data$Receiver.LatLong.String != "NA NA",]
## drop elements with shit date
str(example.data)
is.na(example.data$Date)
example.data <- example.data[!is.na(example.data$Date),]
small <- example.data[1:200,]
small$Category <- c(rep("A",20),rep("B",20),rep("C",60),rep("D",20),rep("E",20),rep("F",20),rep("G",20),rep("E",20))
length(unique(small$Sender.LatLong.String))
length(unique(small$Receiver.LatLong.String))
length(unique(small$Receiver.Country))
length(unique(small$Sender.Country))
write.csv(file = "data/example-map-data.csv", x = small)
## Import file
example_map_data <- read.csv(file ="data/example-map-data.csv", stringsAsFactors = FALSE)
## Coerce dates into dates:
all_countries <- unique(c(example_map_data$Sender.Country, example_map_data$Receiver.Country))
## Make a set of location -> name replacements
location_name_df <- data.frame("LatLong" = c(example_map_data$Sender.LatLong.String,example_map_data$Receiver.LatLong.String),
"Location.Name" = c(example_map_data$Sender.Location, example_map_data$Receiver.Location))
### ============= Find duplicate locations
location_name_df <- location_name_df[!duplicated(location_name_df),]
location_name_df$LatLong <- as.character(location_name_df$LatLong)
location_name_df$Location.Name <- as.character(location_name_df$Location.Name)
duplicate_locations <- subset(location_name_df, LatLong %in% location_name_df[duplicated(location_name_df$LatLong),]$LatLong)
# Remove duplicates
location_name_df <- location_name_df[!duplicated(location_name_df$LatLong),]
dates <- example_map_data$Date
dates
min(dates)
subset_entries <- example.data
all_locations <- unique(c(subset_entries$Sender.LatLong.String, subset_entries$Receiver.LatLong.String))
all_locations
all_locations <- unique(c(subset_entries$Sender.LatLong.String, subset_entries$Receiver.LatLong.String))
## sent location tallies
sent_tallies <- table(subset_entries$Sender.LatLong.String)
sent_tallies <- as.data.frame(sent_tallies)
## use mapvalues to replace names with tallies
sent_tallies_vec <- mapvalues(all_locations, from = sent_tallies$Var1, to = sent_tallies$Freq)
sent_tallies_vec
strings <- c("1","44 55", "444")
grep(" ", strings)
grepl(" ", strings)
grepl(" ",sent_tallies_vec)
!grepl(" ",sent_tallies_vec)
sent_tallies_vec[!grepl(" ",sent_tallies_vec)]
sent_tallies_vec[grepl(" ",sent_tallies_vec)]
sent_tallies_vec[grepl(" ",sent_tallies_vec)] <- 0
sent_tallies_vec
receive_tallies <- table(subset_entries$Receiver.LatLong.String)
receive_tallies <- as.data.frame(receive_tallies)
## use mapvalues to replace names with tallies
receive_tallies_vec <- mapvalues(all_locations, from = receive_tallies$Var1, to = receive_tallies$Freq)
## Find latlongs by looking for " " and replace values with 0
receive_tallies_vec[grepl(" ",receive_tallies_vec)] <- 0
## convert to numeric:
receive_tallies_vec <- as.numeric(receive_tallies_vec)
## Use sapply to extract out latitudes
lat_vec <- sapply(strsplit(all_locations, " "), "[[", 1)
## Use sapply to extract out longitudes
lon_vec <- sapply(strsplit(all_locations, " "), "[[", 2)
location_name_vec <- as.character()
look.up.location <- function(lat_long){
name <- location_name_df[location_name_df$LatLong == lat_long,"Location.Name"]
name <- unique(as.character(name))[1]
location_name_vec <<- append(location_name_vec, name)
}
invisible(lapply(all_locations, function(x) look.up.location(x)))
good.names <- data.frame("name" = location_name_vec, "latlong" = all_locations)
good.names
subset_entries
View(location_name_df)
all_locations
all_location_names <- unique(c(subset_entries$Sender.Location,subset_entries$Receiver.Location))
location_name_df <- location_name_df[!duplicated(location_name_df),]
location_name_df$LatLong <- as.character(location_name_df$LatLong)
location_name_df$Location.Name <- as.character(location_name_df$Location.Name)
duplicate_locations <- subset(location_name_df, LatLong %in% location_name_df[duplicated(location_name_df$LatLong),]$LatLong)
# Remove duplicates
location_name_df <- location_name_df[!duplicated(location_name_df$LatLong),]
all_location_names <- unique(c(subset_entries$Sender.Location,subset_entries$Receiver.Location))
length(all_location_names)
dput(all_location_names)
setdiff(all_location_names,location_name_df$Location.Name)
intersection(all_location_names,location_name_df$Location.Name)
intersect(all_location_names,location_name_df$Location.Name)
example_map_data <- read.csv(file ="data/example-map-data.csv", stringsAsFactors = FALSE)
## Coerce dates into dates:
all_countries <- unique(c(example_map_data$Sender.Country, example_map_data$Receiver.Country))
## Make a set of location -> name replacements
location_name_df <- data.frame("LatLong" = c(example_map_data$Sender.LatLong.String,example_map_data$Receiver.LatLong.String),
"Location.Name" = c(example_map_data$Sender.Location, example_map_data$Receiver.Location))
### ============= Find duplicate locations
location_name_df <- location_name_df[!duplicated(location_name_df),]
location_name_df$LatLong <- as.character(location_name_df$LatLong)
location_name_df$Location.Name <- as.character(location_name_df$Location.Name)
duplicate_locations <- subset(location_name_df, LatLong %in% location_name_df[duplicated(location_name_df$LatLong),]$LatLong)
# Remove duplicates
location_name_df <- location_name_df[!duplicated(location_name_df$LatLong),]
subset_entries <- example_map_data
all_locations <- unique(c(subset_entries$Sender.LatLong.String, subset_entries$Receiver.LatLong.String))
sent_tallies <- table(subset_entries$Sender.LatLong.String)
sent_tallies <- as.data.frame(sent_tallies)
## use mapvalues to replace names with tallies
sent_tallies_vec <- mapvalues(all_locations, from = sent_tallies$Var1, to = sent_tallies$Freq)
## Find latlongs by looking for " " and replace values with 0
sent_tallies_vec[grepl(" ",sent_tallies_vec)] <- 0
## convert to numeric:
sent_tallies_vec <- as.numeric(sent_tallies_vec)
## receive location tallies
receive_tallies <- table(subset_entries$Receiver.LatLong.String)
receive_tallies <- as.data.frame(receive_tallies)
## use mapvalues to replace names with tallies
receive_tallies_vec <- mapvalues(all_locations, from = receive_tallies$Var1, to = receive_tallies$Freq)
## Find latlongs by looking for " " and replace values with 0
receive_tallies_vec[grepl(" ",receive_tallies_vec)] <- 0
## convert to numeric:
receive_tallies_vec <- as.numeric(receive_tallies_vec)
## Use sapply to extract out latitudes
lat_vec <- sapply(strsplit(all_locations, " "), "[[", 1)
## Use sapply to extract out longitudes
lon_vec <- sapply(strsplit(all_locations, " "), "[[", 2)
all_location_names <- unique(c(subset_entries$Sender.Location,subset_entries$Receiver.Location))
setdiff(all_location_names,location_name_df$Location.Name)
intersect(all_location_names,location_name_df$Location.Name)
unique(c(subset_entries$Sender.Location,subset_entries$Receiver.Location)
unique(c(subset_entries$Sender.Location,subset_entries$Receiver.Location))
unique(c(subset_entries$Sender.Location,subset_entries$Receiver.Location))
subset(location_name_df, Location.Name %in% unique(c(subset_entries$Sender.Location,subset_entries$Receiver.Location)))
subset(location_name_df, Location.Name %in% unique(c(subset_entries$Sender.Location,subset_entries$Receiver.Location)))
location_name_vec <- as.character()
look.up.location <- function(lat_long){
name <- location_name_df[location_name_df$LatLong == lat_long,"Location.Name"]
name <- unique(as.character(name))[1]
location_name_vec <<- append(location_name_vec, name)
}
invisible(lapply(all_locations, function(x) look.up.location(x)))
good.names <- data.frame("name" = location_name_vec, "latlong" = all_locations)
good.names <- data.frame("name" = location_name_vec, "latlong" = all_locations)
good.names
location_tallies <- data.frame("lat" = lat_vec,
"lon" = lon_vec,
"Letters.Sent" = sent_tallies_vec,
"Letters.Received" = receive_tallies_vec,
"Name" = location_name_vec)
location_tallies
category.per.location <- as.character()
get.category.for.location <- function(location){
send <- paste(location$lat, location$lon)
entries <- example_map_data[example_map_data$Sender.LatLong.String == send, ]
letter.category.for.route <- as.character(entries$Letter.Series)
if (nrow(entries) == 0) {
category.per.location <<-
append(category.per.location, "none sent")
} else {
if (length(unique(letter.category.for.route)) > 1) {
category.per.location <<-
append(category.per.location, paste0(unique(letter.category.for.route), collapse = "", sep = "<br>"))
} else {
category.per.location <<-
append(category.per.location, unique(letter.category.for.route))
}
}
}
for (i in 1:nrow(location_tallies)) {
get.category.for.location(location_tallies[i,])
}
location_tallies$Letter.Category <-category.per.location
location_tallies$Letter.Category <- category.per.location
category.per.location
get.category.for.location <- function(location){
send <- paste(location$lat, location$lon)
entries <- example_map_data[example_map_data$Sender.LatLong.String == send, ]
letter.category.for.route <- as.character(entries$Category)
if (nrow(entries) == 0) {
category.per.location <<-
append(category.per.location, "none sent")
} else {
if (length(unique(letter.category.for.route)) > 1) {
category.per.location <<-
append(category.per.location, paste0(unique(letter.category.for.route), collapse = "", sep = "<br>"))
} else {
category.per.location <<-
append(category.per.location, unique(letter.category.for.route))
}
}
}
## populate category.per.location vector
for (i in 1:nrow(location_tallies)) {
get.category.for.location(location_tallies[i,])
}
## Add category.per.location to location_tallies
location_tallies$Letter.Category <- category.per.location
category.per.location
get.category.for.location <- function(location){
send <- paste(location$lat, location$lon)
entries <- subset_entries[example_map_data$Sender.LatLong.String == send, ]
letter.category.for.route <- as.character(entries$Category)
if (nrow(entries) == 0) {
category.per.location <<-
append(category.per.location, "none sent")
} else {
if (length(unique(letter.category.for.route)) > 1) {
category.per.location <<-
append(category.per.location, paste0(unique(letter.category.for.route), collapse = "", sep = "<br>"))
} else {
category.per.location <<-
append(category.per.location, unique(letter.category.for.route))
}
}
}
## populate category.per.location vector
for (i in 1:nrow(location_tallies)) {
get.category.for.location(location_tallies[i,])
}
location_tallies$Letter.Category <- category.per.location
get.category.for.location <- function(location){
send <- paste(location$lat, location$lon)
entries <- subset_entries[subset_entries$Sender.LatLong.String == send, ]
letter.category.for.route <- as.character(entries$Category)
if (nrow(entries) == 0) {
category.per.location <<-
append(category.per.location, "none sent")
} else {
if (length(unique(letter.category.for.route)) > 1) {
category.per.location <<-
append(category.per.location, paste0(unique(letter.category.for.route), collapse = "", sep = "<br>"))
} else {
category.per.location <<-
append(category.per.location, unique(letter.category.for.route))
}
}
}
## populate category.per.location vector
for (i in 1:nrow(location_tallies)) {
get.category.for.location(location_tallies[i,])
}
## Add category.per.location to location_tallies
location_tallies$Letter.Category <- category.per.location
category.per.location
location_tallies
nrow(subset_entries)
category.per.location <- as.character()
get.category.for.location <- function(location){
send <- paste(location$lat, location$lon)
entries <- subset_entries[subset_entries$Sender.LatLong.String == send, ]
letter.category.for.route <- as.character(entries$Category)
if (nrow(entries) == 0) {
category.per.location <<-
append(category.per.location, "none sent")
} else {
if (length(unique(letter.category.for.route)) > 1) {
category.per.location <<-
append(category.per.location, paste0(unique(letter.category.for.route), collapse = "", sep = "<br>"))
} else {
category.per.location <<-
append(category.per.location, unique(letter.category.for.route))
}
}
}
## populate category.per.location vector
for (i in 1:nrow(location_tallies)) {
get.category.for.location(location_tallies[i,])
}
location_tallies
nrow(subset_entries)
location_tallies$Letter.Category <- category.per.location
location_tallies <- location_tallies[order(location_tallies$Letter.Category),]
location_tallies
geo_layout <- list(
scope = "europe",
showland = TRUE,
showcountries = FALSE,
landcolor = toRGB("gray85"),
#   subunitwidth = 1,
#   countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white"),
showlakes = TRUE,
lakecolor = "#999999")
plot_ly(location_tallies, lon = lon, lat = lat, marker = list(size = rescale(Letters.Sent + Letters.Received, to = c(7,20))),
type = "scattergeo", locationmode = "country",
text = paste0("Location Name: ",Name,"<br>",
"Letters sent from location: ",Letters.Sent,"<br>",
"Letters received at location: ",Letters.Received,"<br>",
"Letter Category: ",Letter.Category),
hoverinfo = "text",inherit = FALSE,
group = Letter.Category, showlegend = TRUE) %>%
layout(
#          title = "The ‘New’ Germans: Rethinking Integration by understanding the <br>
#          Historical Experience of German Migrants in the US",
geo = geo_layout,
legend = legend_position,
height = "1400px",
legend = list(
xanchor = "auto",
yanchor = "top"
)
)
## locations first
plot_ly(location_tallies, lon = lon, lat = lat, marker = list(size = rescale(Letters.Sent + Letters.Received, to = c(7,20))),
type = "scattergeo", locationmode = "country",
text = paste0("Location Name: ",Name,"<br>",
"Letters sent from location: ",Letters.Sent,"<br>",
"Letters received at location: ",Letters.Received,"<br>",
"Letter Category: ",Letter.Category),
hoverinfo = "text",inherit = FALSE,
group = Letter.Category, showlegend = TRUE) %>%
layout(
#          title = "The ‘New’ Germans: Rethinking Integration by understanding the <br>
#          Historical Experience of German Migrants in the US",
geo = geo_layout,
legend = list(x = 1.1, y = 0.5),
height = "1400px",
legend = list(
xanchor = "auto",
yanchor = "top"
)
)
shiny::runApp()
str(example_map_data)
example_map_data <- read.csv(file ="data/example-map-data.csv", stringsAsFactors = FALSE)
example_map_data$Date <- force_tz(dmy(example_map_data$Date, quiet = TRUE), tzone = "GMT")
shiny::runApp()
example_map_data <- read.csv(file ="data/example-map-data.csv", stringsAsFactors = FALSE)
example_map_data$Date <- force_tz(dmy(example_map_data$Date, quiet = TRUE), tzone = "GMT")
example_map_data$Date
example_map_data <- read.csv(file ="data/example-map-data.csv", stringsAsFactors = FALSE)
example_map_data$Date
force_tz(dmy(example_map_data$Date, quiet = TRUE), tzone = "GMT")
library(lubridate)
force_tz(dmy(example_map_data$Date, quiet = TRUE), tzone = "GMT")
force_tz(ymd(example_map_data$Date, quiet = TRUE), tzone = "GMT")
shiny::runApp()
shiny::runApp()
library(knitr)
shiny::runApp()
example_map_data[1,]
shiny::runApp()
example_data_frame <- data_frame("Send Location (Latitude Location)" = c(" 50.97178 13.960129"),
"Send Location (Name)" = c("DEU, Mockethal"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
example_map_data <- read.csv(file ="data/example-map-data2.csv", stringsAsFactors = FALSE)
example_map_data$Date <- force_tz(ymd(example_map_data$Date, quiet = TRUE), tzone = "GMT")
example_map_data$Date
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('~/Desktop/temp/slider')
shiny::runApp('~/Desktop/temp/slider')
shiny::runApp('~/Desktop/temp/slider')
example_map_data$Date
dates.vec <- example_map_data$Date
shiny::runApp('~/Desktop/temp/slider')
shiny::runApp('~/Desktop/temp/slider')
shiny::runApp('~/Desktop/temp/slider')
as.POSIXct(1900)
as.POSIXct(1900, origin = "1960-01-01", tz = "GMT")
shiny::runApp('~/Desktop/temp/slider')
shiny::runApp('~/Desktop/temp/slider')
shiny::runApp('~/Desktop/temp/slider')
as.POSIXct("1900/12/01")
dates.vec <- example_map_data$Date
shinyServer(
function(input, output, session){
output$slider1 <- renderUI({sliderInput(
"show_letters_before_date", "Show letters up to",
min = min(dates.vec),
max = max(dates.vec),
step = 1000,
value = min(dates.vec)+2*365,
width = "800px",
timeFormat = "%F",
animate = animationOptions(interval = 1000, loop = FALSE)
)})
output$slider2 <- renderUI({
sliderInput("slide2", "Animation duration", min = -30,
max = 30, value = 0, step = 1,
format="## Days",
animate = animationOptions(loop = TRUE, interval = 1000))
})
output$slider3 <- renderUI({
sliderInput("slide3", "Animation duration", min = as.POSIXct("1900/12/01"),
max = as.POSIXct("2000/12/03"), value = 0, step = 1,
format="%F",
animate = animationOptions(loop = TRUE, interval = 1000))
})
output$foo <- renderPrint({
"foo"
})
})
shiny::runApp('~/Desktop/temp/slider')
shiny::runApp('~/Desktop/temp/slider')
shiny::runApp('~/Desktop/temp/slider')
shiny::runApp('~/Desktop/temp/slider')
shiny::runApp('~/Desktop/temp/slider')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
